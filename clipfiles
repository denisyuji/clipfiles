#!/usr/bin/env bash

# Usage: clipfiles [options] [<path or pattern>]

# Default to current directory if no argument is provided
if [ "$#" -eq 0 ]; then
  set -- "."
fi

# Function to display help
show_help() {
  echo "Usage: clipfiles [options] [<path or pattern>]"
  echo "Options:" 
  echo "  -h, --help       Show this help message"
  echo "  -v, --version    Show version information"
}

# Function to display version
show_version() {
  echo "clipfiles version 1.2"
}

# Determine language from file extension
get_language() {
  local ext="${1##*.}"
  case "$ext" in
    py) echo "python" ;;
    sh|bash) echo "shell" ;;
    c|h) echo "c" ;;
    cpp|cc|cxx|hpp) echo "cpp" ;;
    go) echo "go" ;;
    rs) echo "rust" ;;
    js) echo "javascript" ;;
    ts) echo "typescript" ;;
    java) echo "java" ;;
    html|htm) echo "html" ;;
    css) echo "css" ;;
    json) echo "json" ;;
    yaml|yml) echo "yaml" ;;
    toml) echo "toml" ;;
    md) echo "markdown" ;;
    txt|text|log) echo "text" ;;
    dockerfile|Dockerfile) echo "dockerfile" ;;
    mk|makefile|Makefile) echo "makefile" ;;
    bb|bbappend|bbclass|conf|inc) echo "bitbake" ;;  # Yocto
    meson) echo "meson" ;;
    ninja) echo "ninja" ;;
    xml) echo "xml" ;;
    *) echo "" ;;
  esac
}

# Function to check if a file is binary
is_binary() {
  local file="$1"
  [[ "$(file --mime-encoding -b "$file")" != "us-ascii" && "$(file --mime-encoding -b "$file")" != "utf-8" ]]
}

# Check for options
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -h|--help)
      show_help
      exit 0
      ;;  
    -v|--version)
      show_version
      exit 0
      ;;  
    *)
      break
      ;;  
  esac
  shift
done

# Expand and collect files, avoiding duplicates
declare -A FILE_MAP
FILES_FIRST=()
FILES_SECOND=()

for ARG in "$@"; do
  if [ -d "$ARG" ]; then
    while IFS= read -r -d '' FILE; do
      if [[ -z "${FILE_MAP[$FILE]}" ]]; then
        FILE_MAP["$FILE"]=1
        RELATIVE="${FILE#$ARG/}"
        if [[ "$RELATIVE" == */* ]]; then
          FILES_SECOND+=("$FILE")
        else
          FILES_FIRST+=("$FILE")
        fi
      fi
    done < <(find "$ARG" \( -type d -name '.*' -prune \) -o \( -type f -print0 \))
  else
    for MATCH in $ARG; do
      if [ -f "$MATCH" ] && [[ -z "${FILE_MAP[$MATCH]}" ]]; then
        FILE_MAP["$MATCH"]=1
        FILES_FIRST+=("$MATCH")
      fi
    done
  fi
done

# Process each unique file: top-level files first, then subdirectory files
ALL_FILES=("${FILES_FIRST[@]}" "${FILES_SECOND[@]}")

for FILE in "${ALL_FILES[@]}"; do
  if ! is_binary "$FILE"; then
    OUTPUT+=$'\n'"$FILE"$'\n'
    OUTPUT+='```'$'\n'
    OUTPUT+="$(cat "$FILE")"$'\n'
    OUTPUT+='```'$'\n'
  else
    echo "Skipping binary file: $FILE"
  fi
done

# Output to clipboard if OUTPUT is not empty
if [[ -n "$OUTPUT" ]]; then
  echo "$OUTPUT" | xclip -selection clipboard
  echo "Copied to clipboard."
else
  echo "No text files found to copy."
fi